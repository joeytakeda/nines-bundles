<?php

namespace {{ namespace }}\Tests\Controller;

use {{ entity_full_class_name }};
use {{ fixture_full_class_name }};
use {{ repository_full_class_name }};
use Nines\UserBundle\DataFixtures\UserFixtures;
use Nines\UtilBundle\Tests\ControllerBaseCase;
use Symfony\Component\HttpFoundation\Response;

class {{ test_class_name }} extends ControllerBaseCase {

    // Change this to HTTP_OK when the site is public.
    private const ANON_RESPONSE_CODE=Response::HTTP_FOUND;

    private const TYPEAHEAD_QUERY='{{ entity_var_singular }}';

    protected function fixtures() : array {
        return [
            {{ fixture_class_name }}::class,
            UserFixtures::class,
        ];
    }

    /**
     * @group anon
     * @group index
     */
    public function testAnonIndex() {
        $crawler = $this->client->request('GET', '/{{ route_name }}/');
        $this->assertSame(self::ANON_RESPONSE_CODE, $this->client->getResponse()->getStatusCode());
        $this->assertEquals(0, $crawler->selectLink('New')->count());
    }

    /**
     * @group user
     * @group index
     */
    public function testUserIndex() {
        $this->login('user.user');
        $crawler = $this->client->request('GET', '/{{ route_name }}/');
        $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());
        $this->assertEquals(0, $crawler->selectLink('New')->count());
    }

    /**
     * @group admin
     * @group index
     */
    public function testAdminIndex() {
        $this->login('user.admin');
        $crawler = $this->client->request('GET', '/{{ route_name }}/');
        $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());
        $this->assertEquals(1, $crawler->selectLink('New')->count());
    }

    /**
     * @group anon
     * @group show
     */
    public function testAnonShow() {
        $crawler = $this->client->request('GET', '/{{ route_name }}/1');
        $this->assertSame(self::ANON_RESPONSE_CODE, $this->client->getResponse()->getStatusCode());
        $this->assertEquals(0, $crawler->selectLink('Edit')->count());
    }

    /**
     * @group user
     * @group show
     */
    public function testUserShow() {
        $this->login('user.user');
        $crawler = $this->client->request('GET', '/{{ route_name }}/1');
        $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());
        $this->assertEquals(0, $crawler->selectLink('Edit')->count());
    }

    /**
     * @group admin
     * @group show
     */
    public function testAdminShow() {
        $this->login('user.admin');
        $crawler = $this->client->request('GET', '/{{ route_name }}/1');
        $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());
        $this->assertEquals(1, $crawler->selectLink('Edit')->count());
    }

    /**
     * @group anon
     * @group typeahead
     */
    public function testAnonTypeahead() {
        $this->client->request('GET', '/{{ route_name }}/typeahead?q=' . self::TYPEAHEAD_QUERY);
        $response = $this->client->getResponse();
        $this->assertSame(self::ANON_RESPONSE_CODE, $this->client->getResponse()->getStatusCode());
        if(self::ANON_RESPONSE_CODE === Response::HTTP_FOUND) {
            // If authentication is required stop here.
            return;
        }
        $this->assertEquals('application/json', $response->headers->get('content-type'));
        $json = json_decode($response->getContent());
        $this->assertEquals(4, count($json));
    }

    /**
     * @group user
     * @group typeahead
     */
    public function testUserTypeahead() {
        $this->login('user.user');
        $this->client->request('GET', '/{{ route_name }}/typeahead?q=' . self::TYPEAHEAD_QUERY);
        $response = $this->client->getResponse();
        $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());
        $this->assertEquals('application/json', $response->headers->get('content-type'));
        $json = json_decode($response->getContent());
        $this->assertEquals(4, count($json));
    }

    /**
     * @group admin
     * @group typeahead
     */
    public function testAdminTypeahead() {
        $this->login('user.admin');
        $this->client->request('GET', '/{{ route_name }}/typeahead?q=' . self::TYPEAHEAD_QUERY);
        $response = $this->client->getResponse();
        $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());
        $this->assertEquals('application/json', $response->headers->get('content-type'));
        $json = json_decode($response->getContent());
        $this->assertEquals(4, count($json));
    }

    public function testAnonSearch() : void {
        $repo = $this->createMock({{ repository_class_name }}::class);
        $repo->method('searchQuery')->willReturn([$this->getReference('{{ entity_class_name|lower }}.1')]);
        $this->client->disableReboot();
        $this->client->getContainer()->set({{ repository_class_name }}::class, $repo);

        $crawler = $this->client->request('GET', '/{{ route_name }}/search');
        $this->assertSame(self::ANON_RESPONSE_CODE, $this->client->getResponse()->getStatusCode());
        if(self::ANON_RESPONSE_CODE === Response::HTTP_FOUND) {
            // If authentication is required stop here.
            return;
        }

        $form = $crawler->selectButton('btn-search')->form([
            'q' => '{{ entity_var_singular }}',
        ]);

        $responseCrawler = $this->client->submit($form);
        $this->assertSame(200, $this->client->getResponse()->getStatusCode());
    }

    public function testUserSearch() : void {
        $repo = $this->createMock({{ repository_class_name }}::class);
        $repo->method('searchQuery')->willReturn([$this->getReference('{{ entity_class_name|lower }}.1')]);
        $this->client->disableReboot();
        $this->client->getContainer()->set({{ repository_class_name }}::class, $repo);

        $this->login('user.user');
        $crawler = $this->client->request('GET', '/{{ route_name }}/search');
        $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());

        $form = $crawler->selectButton('btn-search')->form([
            'q' => '{{ entity_var_singular }}',
        ]);

        $responseCrawler = $this->client->submit($form);
        $this->assertSame(200, $this->client->getResponse()->getStatusCode());
    }

    public function testAdminSearch() : void {
        $repo = $this->createMock({{ repository_class_name }}::class);
        $repo->method('searchQuery')->willReturn([$this->getReference('{{ entity_class_name|lower }}.1')]);
        $this->client->disableReboot();
        $this->client->getContainer()->set({{ repository_class_name }}::class, $repo);

        $this->login('user.admin');
        $crawler = $this->client->request('GET', '/{{ route_name }}/search');
        $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());

        $form = $crawler->selectButton('btn-search')->form([
            'q' => '{{ entity_var_singular }}',
        ]);

        $responseCrawler = $this->client->submit($form);
        $this->assertSame(200, $this->client->getResponse()->getStatusCode());
    }

    /**
     * @group anon
     * @group edit
     */
    public function testAnonEdit() {
        $crawler = $this->client->request('GET', '/{{ route_name }}/1/edit');
        $this->assertSame(Response::HTTP_FOUND, $this->client->getResponse()->getStatusCode());
        $this->assertTrue($this->client->getResponse()->isRedirect());
    }

    /**
     * @group user
     * @group edit
     */
    public function testUserEdit() {
        $this->login('user.user');
        $crawler = $this->client->request('GET', '/{{ route_name }}/1/edit');
        $this->assertSame(403, $this->client->getResponse()->getStatusCode());
    }

    /**
     * @group admin
     * @group edit
     */
    public function testAdminEdit() {
        $this->login('user.admin');
        $formCrawler = $this->client->request('GET', '/{{ route_name }}/1/edit');
        $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());

        $form = $formCrawler->selectButton('Save')->form([
        {% for field in mapped_field_names %}
            {%- if field in field_mappings|keys %}
                {%- set mapping = field_mappings[field] %}
                {%- set label = mapping['columnName'] | replace({'_': ' '}) | title | replace({' ': ''}) -%}
                '{{ entity_twig_var_singular }}[{{ field }}]' => 'Updated {{ label }}',
            {% else -%}
                {% set relation = relations[field] %}
                {% set association = associations[field] %}
                {% set label = relation['entity_class_name'] %}
                {% if association['type'] == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_ONE') %}
                    '{{ entity_twig_var_singular }}[{{ field }}]' => $this->getReference('{{field}}.1'),
                {% endif %}
            {% endif -%}
        {%- endfor %}
        ]);

        $this->client->submit($form);
        $this->assertTrue($this->client->getResponse()->isRedirect('/{{ route_name }}/1'));
        $responseCrawler = $this->client->followRedirect();
        $this->assertEquals(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());
        {% for field in mapped_field_names %}
            {%- if field in field_mappings|keys %}
                {%- set mapping = field_mappings[field] %}
                {%- set label = mapping['columnName'] | replace({'_': ' '}) | title | replace({' ': ''}) -%}
        $this->assertEquals(1, $responseCrawler->filter('td:contains("Updated {{ label }}")')->count());
            {% endif -%}
        {% endfor %}
    }

    /**
     * @group anon
     * @group new
     */
    public function testAnonNew() {
        $crawler = $this->client->request('GET', '/{{ route_name }}/new');
        $this->assertSame(Response::HTTP_FOUND, $this->client->getResponse()->getStatusCode());
        $this->assertTrue($this->client->getResponse()->isRedirect());
    }

    /**
     * @group anon
     * @group new
     */
    public function testAnonNewPopup() {
        $crawler = $this->client->request('GET', '/{{ route_name }}/new_popup');
        $this->assertSame(Response::HTTP_FOUND, $this->client->getResponse()->getStatusCode());
        $this->assertTrue($this->client->getResponse()->isRedirect());
    }

    /**
     * @group user
     * @group new
     */
    public function testUserNew() {
        $this->login('user.user');
        $crawler = $this->client->request('GET', '/{{ route_name }}/new');
        $this->assertSame(403, $this->client->getResponse()->getStatusCode());
    }

    /**
     * @group user
     * @group new
     */
    public function testUserNewPopup() {
        $this->login('user.user');
        $crawler = $this->client->request('GET', '/{{ route_name }}/new_popup');
        $this->assertSame(403, $this->client->getResponse()->getStatusCode());
    }

    /**
     * @group admin
     * @group new
     */
    public function testAdminNew() {
        $this->login('user.admin');
        $formCrawler = $this->client->request('GET', '/{{ route_name }}/new');
        $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());

        $form = $formCrawler->selectButton('Save')->form([
        {% for field in mapped_field_names %}
            {%- if field in field_mappings|keys %}
                {%- set mapping = field_mappings[field] %}
                {%- set label = mapping['columnName'] | replace({'_': ' '}) | title | replace({' ': ''}) -%}
                '{{ entity_twig_var_singular }}[{{ field }}]' => 'New {{ label }}',
            {% else -%}
                {% set relation = relations[field] %}
                {% set association = associations[field] %}
                {% set label = relation['entity_class_name'] %}
                {% if association['type'] == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_ONE') %}
                    '{{ entity_twig_var_singular }}[{{ field }}]' => $this->getReference('{{field}}.1'),
                {% endif %}
            {% endif -%}
        {%- endfor %}
        ]);

        $this->client->submit($form);
        $this->assertTrue($this->client->getResponse()->isRedirect());
        $responseCrawler = $this->client->followRedirect();
        $this->assertEquals(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());
        {% for field in mapped_field_names %}
            {%- if field in field_mappings|keys %}
                {%- set mapping = field_mappings[field] %}
                {%- set label = mapping['columnName'] | replace({'_': ' '}) | title | replace({' ': ''}) -%}
        $this->assertEquals(1, $responseCrawler->filter('td:contains("New {{ label }}")')->count());
            {% endif -%}
        {% endfor %}
    }

    /**
     * @group admin
     * @group new
     */
    public function testAdminNewPopup() {
        $this->login('user.admin');
        $formCrawler = $this->client->request('GET', '/{{ route_name }}/new_popup');
        $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());

        $form = $formCrawler->selectButton('Save')->form([
        {% for field in mapped_field_names %}
            {%- if field in field_mappings|keys %}
                {%- set mapping = field_mappings[field] %}
                {%- set label = mapping['columnName'] | replace({'_': ' '}) | title | replace({' ': ''}) -%}
                '{{ entity_twig_var_singular }}[{{ field }}]' => 'New {{ label }}',
            {% else -%}
                {% set relation = relations[field] %}
                {% set association = associations[field] %}
                {% set label = relation['entity_class_name'] %}
                {% if association['type'] == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_ONE') %}
                    '{{ entity_twig_var_singular }}[{{ field }}]' => $this->getReference('{{field}}.1',
                {% endif %}
            {% endif -%}
        {%- endfor %}
        ]);

        $this->client->submit($form);
        $this->assertTrue($this->client->getResponse()->isRedirect());
        $responseCrawler = $this->client->followRedirect();
        $this->assertEquals(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());
        {% for field in mapped_field_names %}
            {%- if field in field_mappings|keys %}
                {%- set mapping = field_mappings[field] %}
                {%- set label = mapping['columnName'] | replace({'_': ' '}) | title | replace({' ': ''}) -%}
                $this->assertEquals(1, $responseCrawler->filter('td:contains("{{ label }}")')->count());
            {% endif -%}
        {% endfor %}
    }

    /**
     * @group admin
     * @group delete
     */
    public function testAdminDelete() {
        $repo = self::$container->get({{ repository_class_name }}::class);
        $preCount = count($repo->findAll());

        $this->login('user.admin');
        $crawler = $this->client->request('GET', '/{{ route_name }}/1');
        $form = $crawler->selectButton('Delete')->form();
        $this->client->submit($form);

        $this->assertSame(Response::HTTP_FOUND, $this->client->getResponse()->getStatusCode());
        $this->assertTrue($this->client->getResponse()->isRedirect());
        $responseCrawler = $this->client->followRedirect();
        $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());

        $this->entityManager->clear();
        $postCount = count($repo->findAll());
        $this->assertEquals($preCount - 1, $postCount);
    }
}
