<?php

namespace Nines\UtilBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\Debug\Exception\FlattenException;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Log\DebugLoggerInterface;

/**
 * Handles errors generated by controllers. Shows error details in the dev
 * environment.
 *
 * To use it, add this to your config.yml
 * twig:
 *    paths:
 *       '%kernel.root_dir%/../src/Nines/UtilBundle/Resources/views': NinesUtilBundle
 *   exception_controller:  NinesUtilBundle:Error:showException
 */
class ErrorController extends Controller
{

    /**
     * Handle an exception.
     *
     * @param FlattenException $exception The caught exception.
     * @param DebugLoggerInterface $logger Logger with more information.
     *
     * @return Response
     */
    public function showExceptionAction(FlattenException $exception, DebugLoggerInterface $logger) {
        $response = new Response();
        $response->setStatusCode($exception->getStatusCode());
        $response->headers->set('Content-Type', 'text/html');

        $env = $this->container->get( 'kernel' )->getEnvironment();
        switch($env) {
            case 'prod':
                $response->setContent($this->render('NinesUtilBundle:Error:prod.html.twig', array(
                    'exception' => $exception,
                )));
                break;

            case 'dev':
                $response->setContent($this->render('NinesUtilBundle:Error:dev.html.twig', array(
                    'exception' => $exception,
                )));
                break;

            case 'test':
                $response->headers->set('Content-Type', 'text/plain');
                $response->setContent($exception->getMessage());
                break;

            default:
                break;
        }
        return $response;
    }

}
